{"version":3,"sources":["data/gpx/activity.gpx","Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RouteMap","useEffect","map","L","center","zoom","maxZoom","control","scale","maxWidth","metric","addTo","tileLayer","attribution","LeafletGpx","GPX","gpx","async","polyline_options","weight","color","title","position","onAdd","h1","DomUtil","create","innerHTML","id","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,sC,uOC6C1BC,EAxCO,WAqCpB,OApCAC,qBAAU,WACR,IAAIC,EAAMC,IAAED,IAAI,MAAO,CACrBE,OAAQ,CAAC,OAAQ,MACjBC,KAAM,GACNC,QAAS,KAGXH,IAAEI,QAAQC,MAAM,CACZC,SAAU,IACVC,OAAQ,MACTC,MAAMT,GACTC,IAAES,UAAU,gEAAiE,CAC3EC,YACA,sJACCF,MAAMT,GAET,IAAIY,IAAWC,IAAIC,IAAK,CACtBC,OAAO,EACPC,iBAAkB,CACdC,OAAQ,EACRC,MAAO,aAEVT,MAAMT,GAET,IAAImB,EAAQlB,IAAEI,QAAQ,CAACe,SAAU,YAEjCD,EAAME,MAAQ,SAASrB,GACnB,IAAIsB,EAAKrB,IAAEsB,QAAQC,OAAO,KAAK,SAE/B,OADAF,EAAGG,UAAY,6BACRH,GAEXH,EAAMV,MAAMT,KAGX,IAEI,yBAAK0B,GAAG,SChCJC,G,6KAJX,OAAO,kBAAC,EAAD,U,GAFOC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49a03b4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/activity.f63a5087.gpx\";","import React, { useEffect } from 'react';\r\nimport LeafletGpx from \"leaflet-gpx\";\r\nimport L from 'leaflet';\r\nimport gpx from \"../src/data/gpx/activity.gpx\"\r\n\r\nexport const RouteMap = () => {\r\n    useEffect(() => {\r\n      var map = L.map('map', {\r\n        center: [43.05, -89.4],\r\n        zoom: 12,\r\n        maxZoom: 14\r\n        });\r\n    \r\n      L.control.scale({\r\n          maxWidth: 200,\r\n          metric: 'm'\r\n      }).addTo(map)\r\n      L.tileLayer(\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\", {\r\n        attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\r\n      }).addTo(map);\r\n  \r\n      new LeafletGpx.GPX(gpx, {\r\n        async: true,\r\n        polyline_options: {\r\n            weight: 1,\r\n            color: '#ffa500'\r\n        },\r\n      }).addTo(map);\r\n\r\n      var title = L.control({position: 'topleft'})\r\n\r\n      title.onAdd = function(map){\r\n          var h1 = L.DomUtil.create('h1','title');\r\n          h1.innerHTML = \"Paths from my Garmin Watch\";\r\n          return h1;\r\n      }\r\n      title.addTo(map)\r\n\r\n\r\n    }, []);\r\n  \r\n    return <div id=\"map\"></div>;\r\n  };\r\n\r\n  export default RouteMap\r\n","import React, { Component } from 'react';\nimport RouteMap from './Map';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return <RouteMap />\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}